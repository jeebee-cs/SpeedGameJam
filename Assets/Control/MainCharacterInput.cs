//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/Control/MainCharacterInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @MainCharacterInput : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @MainCharacterInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""MainCharacterInput"",
    ""maps"": [
        {
            ""name"": ""Control"",
            ""id"": ""74e37390-ef43-46a8-b7ed-415fa78c08ad"",
            ""actions"": [
                {
                    ""name"": ""Movement"",
                    ""type"": ""Value"",
                    ""id"": ""8e914183-9f3f-41c8-9a2c-c4bb2494c630"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""SlowMotion"",
                    ""type"": ""Button"",
                    ""id"": ""cbdb51bb-6838-4014-ab9e-b9e3006d2c8b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""AccelerateMotion"",
                    ""type"": ""Button"",
                    ""id"": ""69ffe408-c487-4e01-82f8-909e8cb13789"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Reset"",
                    ""type"": ""Button"",
                    ""id"": ""ac585f71-d74e-4016-a5bb-eb83a2cbfcca"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""8880c19f-733c-4f7f-b81f-ce9142365980"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""c5bf847c-d3af-4d93-9dff-fe1aa7d8093e"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""1fa31b5b-fc03-4157-bc82-ad583a7ab550"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""aec547a6-78e8-4ca8-8e46-dfc95a6a0125"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""d0557ef7-8c41-456f-a8c5-17e5777218b7"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""696d5a5f-c83c-4bad-ae78-95e86a5c70e3"",
                    ""path"": ""<Keyboard>/shift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SlowMotion"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2ed719cc-c566-47da-9fe6-8ecc3921eb24"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""AccelerateMotion"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ec1cc223-d3ce-4184-84e2-ef841dc98283"",
                    ""path"": ""<Keyboard>/r"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Reset"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Control
        m_Control = asset.FindActionMap("Control", throwIfNotFound: true);
        m_Control_Movement = m_Control.FindAction("Movement", throwIfNotFound: true);
        m_Control_SlowMotion = m_Control.FindAction("SlowMotion", throwIfNotFound: true);
        m_Control_AccelerateMotion = m_Control.FindAction("AccelerateMotion", throwIfNotFound: true);
        m_Control_Reset = m_Control.FindAction("Reset", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Control
    private readonly InputActionMap m_Control;
    private IControlActions m_ControlActionsCallbackInterface;
    private readonly InputAction m_Control_Movement;
    private readonly InputAction m_Control_SlowMotion;
    private readonly InputAction m_Control_AccelerateMotion;
    private readonly InputAction m_Control_Reset;
    public struct ControlActions
    {
        private @MainCharacterInput m_Wrapper;
        public ControlActions(@MainCharacterInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Movement => m_Wrapper.m_Control_Movement;
        public InputAction @SlowMotion => m_Wrapper.m_Control_SlowMotion;
        public InputAction @AccelerateMotion => m_Wrapper.m_Control_AccelerateMotion;
        public InputAction @Reset => m_Wrapper.m_Control_Reset;
        public InputActionMap Get() { return m_Wrapper.m_Control; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(ControlActions set) { return set.Get(); }
        public void SetCallbacks(IControlActions instance)
        {
            if (m_Wrapper.m_ControlActionsCallbackInterface != null)
            {
                @Movement.started -= m_Wrapper.m_ControlActionsCallbackInterface.OnMovement;
                @Movement.performed -= m_Wrapper.m_ControlActionsCallbackInterface.OnMovement;
                @Movement.canceled -= m_Wrapper.m_ControlActionsCallbackInterface.OnMovement;
                @SlowMotion.started -= m_Wrapper.m_ControlActionsCallbackInterface.OnSlowMotion;
                @SlowMotion.performed -= m_Wrapper.m_ControlActionsCallbackInterface.OnSlowMotion;
                @SlowMotion.canceled -= m_Wrapper.m_ControlActionsCallbackInterface.OnSlowMotion;
                @AccelerateMotion.started -= m_Wrapper.m_ControlActionsCallbackInterface.OnAccelerateMotion;
                @AccelerateMotion.performed -= m_Wrapper.m_ControlActionsCallbackInterface.OnAccelerateMotion;
                @AccelerateMotion.canceled -= m_Wrapper.m_ControlActionsCallbackInterface.OnAccelerateMotion;
                @Reset.started -= m_Wrapper.m_ControlActionsCallbackInterface.OnReset;
                @Reset.performed -= m_Wrapper.m_ControlActionsCallbackInterface.OnReset;
                @Reset.canceled -= m_Wrapper.m_ControlActionsCallbackInterface.OnReset;
            }
            m_Wrapper.m_ControlActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Movement.started += instance.OnMovement;
                @Movement.performed += instance.OnMovement;
                @Movement.canceled += instance.OnMovement;
                @SlowMotion.started += instance.OnSlowMotion;
                @SlowMotion.performed += instance.OnSlowMotion;
                @SlowMotion.canceled += instance.OnSlowMotion;
                @AccelerateMotion.started += instance.OnAccelerateMotion;
                @AccelerateMotion.performed += instance.OnAccelerateMotion;
                @AccelerateMotion.canceled += instance.OnAccelerateMotion;
                @Reset.started += instance.OnReset;
                @Reset.performed += instance.OnReset;
                @Reset.canceled += instance.OnReset;
            }
        }
    }
    public ControlActions @Control => new ControlActions(this);
    public interface IControlActions
    {
        void OnMovement(InputAction.CallbackContext context);
        void OnSlowMotion(InputAction.CallbackContext context);
        void OnAccelerateMotion(InputAction.CallbackContext context);
        void OnReset(InputAction.CallbackContext context);
    }
}
